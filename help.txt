# api_app_directory

# Тестовое задание: Создание REST API приложения для справочника Организаций, Зданий и Деятельности

## Цели:
1. Спроектировать базу данных, реализовать миграции и заполнить её тестовыми данными.
2. Разработать REST API с использованием FastAPI, Pydantic, SQLAlchemy и Alembic.
3. Упаковать приложение в Docker-контейнер.
4. Добавить документацию API через Swagger UI или Redoc.

## Требования к проекту:

### 1. База данных
- **Организация**:
  - Поля: `id`, `name` (название), `phone_numbers` (список номеров телефонов), `building_id` (внешний ключ на таблицу зданий), `activities` (многие ко многим связь с таблицей деятельностей).
- **Здание**:
  - Поля: `id`, `address` (адрес), `latitude` (широта), `longitude` (долгота).
- **Деятельность**:
  - Поля: `id`, `name` (название), `parent_id` (внешний ключ для древовидной структуры, ограничение вложенности до 3 уровней).

### 2. Функционал API
Реализовать следующие методы:
1. **Список всех организаций в конкретном здании**:
   - Метод: GET `/buildings/{building_id}/organizations`
   - Ответ: JSON-массив организаций.
2. **Список всех организаций по виду деятельности**:
   - Метод: GET `/activities/{activity_id}/organizations`
   - Ответ: JSON-массив организаций.
3. **Поиск организаций в радиусе/прямоугольной области относительно точки на карте**:
   - Метод: GET `/organizations/search`
   - Параметры: `latitude`, `longitude`, `radius` (или `min_lat`, `max_lat`, `min_lon`, `max_lon`).
   - Ответ: JSON-массив организаций.
4. **Информация об организации по ID**:
   - Метод: GET `/organizations/{organization_id}`
   - Ответ: JSON-объект с данными организации.
5. **Поиск организаций по родительской деятельности**:
   - Метод: GET `/activities/search`
   - Параметры: `activity_name`.
   - Ответ: JSON-массив организаций, связанных с указанной деятельностью и её дочерними элементами.
6. **Поиск организаций по названию**:
   - Метод: GET `/organizations/search`
   - Параметры: `name`.
   - Ответ: JSON-массив организаций.

### 3. Безопасность
- Все запросы должны использовать статический API-ключ, передаваемый в заголовке `X-API-Key`.

### 4. Документация
- Добавить автоматическую документацию через Swagger UI или Redoc.

### 5. Docker
- Создать Dockerfile и docker-compose.yml для запуска приложения и базы данных (PostgreSQL).
- Написать инструкцию по разворачиванию проекта.

## Инструкции для GitHub Copilot:
1. Используй современные практики разработки Python:
   - Структурируй проект: `app/`, `migrations/`, `tests/`, `docker/`.
   - Используй модульность: разделение на роуты, модели, сервисы.
   - Пиши чистый, понятный код с комментариями.
2. Реализуй все методы API с учётом требований.
3. Добавь проверку входных данных через Pydantic.
4. Используй SQLAlchemy для работы с базой данных.
5. Напиши миграции через Alembic.
6. Добавь тестовые данные и скрипт для их загрузки.
7. Упакуй приложение в Docker-контейнер.
8. Добавь документацию API через Swagger UI.

## Пример структуры проекта:

project/
├── app/initial commit
│ ├── main.py # Точка входа
│ ├── models.py # Модели SQLAlchemy
│ ├── schemas.py # Pydantic схемы
│ ├── routes/ # Роуты API
│ │ ├── organizations.py
│ │ ├── buildings.py
│ │ └── activities.py
│ ├── services/ # Бизнес-логика
│ │ ├── organization_service.py
│ │ └── activity_service.py
│ └── database.py # Настройка SQLAlchemy
├── migrations/ # Alembic миграции
├── tests/ # Тесты
├── docker/ # Docker файлы
│ ├── Dockerfile
│ └── docker-compose.yml
└── README.md # Инструкция по разворачиванию

# API App

## Установка
1. Установите зависимости:
   ```bash
   pip install -r requirements.txt
   ```

2. Запустите приложение:
   ```bash
   uvicorn src.main:app --reload
   ```

## Структура проекта
- `src/main.py`: Основной файл приложения.
- `docker/Dockerfile`: Конфигурация Docker.
- `requirements.txt`: Зависимости.

## API
- `GET /`: Возвращает сообщение "Hello, World!".